{"version":3,"sources":["asserts/logo.png","components/FilterForm.js","components/MonitoringPage.js","constants.js","components/Dashboard.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FilterForm","props","change","event","target","placeholder","callFilterProcess","value","setState","callFilterStatus","state","tabSelect","this","onChange","Form","className","role","Row","Group","controlId","Label","Control","author","as","defaultValue","onClick","loadMoreData","IconButton","aria-label","size","aria-hidden","Button","addNewDataset","width","height","viewBox","fill","xmlns","window","location","href","fillRule","d","style","pipelineToken","refreshToken","Component","stateType","MonitoringPage","columnHover","cell","row","enumObject","rowIndex","formatCopyData","data","id","copy","JSON","stringify","replace","toggle","bind","tooltipCopyFormatter","popoverOpen","columnWidths","e","showCopyIcon","OverlayTrigger","placement","overlay","Tooltip","String","text","navigator","clipboard","writeText","then","err","console","log","textArea","document","createElement","position","body","appendChild","focus","select","execCommand","removeChild","formatedData","copyToClipboard","alert","nextProps","filterKeyword","refs","stateNameCol","applyFilter","filterProcessKeyword","processNameCol","index","$","length","resizable","minWidth","handles","resize","__event","ui","newColumnWidths","columns","dataSource","selectRow","isSelect","keyField","forEach","element","tableRowEvents","setRefreshToken","mode","clickToSelect","hideSelectAll","onSelect","onTurn","bootstrap4","bordered","striped","hover","sort","dataField","order","filter","filterFactory","rowEvents","headerClasses","dataFormat","containerStyle","tableStyle","bodyStyle","headerStyle","tooltipFormatter","dataSort","thStyle","border","tdStyle","isKey","ref","type","filterFormatted","enumFormatter","formatExtraData","options","COLUMNS_LOGS","classes","ids","Dashboard","onResultFilter","onStatusFilter","onDsNameFilter","onStateFilter","onProcessFilter","columnsData","hidden","customFilter","filterRenderer","onFilter","column","columnSelected","key","onValueChange","valueAll","targetId","showError","React","createRef","mounted","i","filterValue","datasets","dataSourceLogs","prevProps","AWS","require","config","Config","accessKeyId","process","secretAccessKey","region","activeId","active","token","newKeyword","trackPromise","axios","get","headers","res","catch","datasetNames","push","name","fetchLogsData","setActive","Nav","Navbar","bg","variant","Brand","alt","src","Logo","App","handleClick","isEmptyState","isAddTripState","dataset","newDataSource","showErrorAlert","setupAWSSdk","update","dynamoDbCrc32","docClient","DynamoDB","DocumentClient","params","TableName","scan","promise","result","error","getDynamoDbData","fetchData","isLoading","exact","path","isDataset","Boolean","hostname","match","LoadingIndicator","promiseInProgress","usePromiseTracker","disableYellowBox","display","justifyContent","alignItems","color","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8b87b206.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.39fadd87.png\";","import React, { Component } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\n/**\r\n * @componentName Filter form component\r\n * @description Component responsible for filtering table data based on process name, status etc.\r\n */\r\nclass FilterForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\"\r\n    };\r\n  }\r\n\r\n  change = (event) => { \r\n    if(event.target.placeholder === \"Process name\") {\r\n      this.props.callFilterProcess(event.target.value);\r\n      this.setState({value: event.target.value});\r\n    }\r\n    else {\r\n      this.props.callFilterStatus(event.target.value);\r\n      this.setState({value: event.target.value});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const tabSelect = this.props.tabSelect;\r\n    const onChange = this.props.onChange;\r\n    if (tabSelect === \"Data\") {\r\n      return (\r\n        <Form className=\"form-inline datasetForm\" role=\"form\">\r\n          <Form.Row className=\"row d-flex dtSetRow\" >\r\n            <Form.Group controlId=\"formGridDatasetName\" className=\"form-group form-dataset-name\">\r\n              <Form.Label className=\"col-md-auto control-label formLabel\">\r\n                Dataset name\r\n              </Form.Label>\r\n              <div className=\"col colDts\">\r\n                <Form.Control\r\n                  placeholder=\"Enter dataset name\"\r\n                  className=\"form-control-static selectOpt\"\r\n                  onChange={onChange}\r\n                />\r\n              </div>\r\n            </Form.Group> \r\n            {!this.props.author && (\r\n            <Form.Group controlId=\"formGridResult\" className=\"form-group flex-grow-1 mr-auto form-group\">\r\n              <Form.Label className=\"col-md-auto control-label formLabel\">\r\n                Status\r\n              </Form.Label>\r\n              <div className=\"col colRsp\">\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  defaultValue=\"All\"\r\n                  className=\"form-control-static selectOpt\"\r\n                  onChange={onChange}\r\n                >\r\n                  <option>All</option>\r\n                  <option>Info</option>\r\n                  <option>Warning</option>\r\n                  <option>Error</option>\r\n                </Form.Control>\r\n              </div>\r\n              <div className=\"refreshBtnDiv\" onClick = {this.props.loadMoreData()}>\r\n                <IconButton aria-label=\"refresh\" className= \"refreshBtn\" size=\"small\">\r\n                  <i className=\"fa fa-refresh float-right\" aria-hidden=\"true\"></i>\r\n                </IconButton>\r\n              </div>\r\n            </Form.Group>\r\n            )}\r\n\r\n            {this.props.author && (\r\n              <Form.Group controlId=\"formBtn\" className=\"form-group flex-grow-1 mr-auto\">\r\n                <div className=\"col col-new-dataset\">\r\n                  <Button className=\"btn btn-primary float-right\" onClick={this.props.addNewDataset}>\r\n                    New dataset\r\n                  </Button>\r\n                </div>\r\n              </Form.Group>\r\n            )}\r\n          </Form.Row>\r\n        </Form>\r\n      );\r\n    }\r\n    if (tabSelect === \"Logs\") {\r\n      return (\r\n        <Form className=\"form-inline\" role=\"form\">\r\n          <Form.Row className=\"row d-flex dtSetRow form-row\">\r\n          <Form.Group controlId=\"formBtn\" className=\"form-group\">\r\n                <div className=\"col\">\r\n                  <svg width=\"2.3em\" height=\"2.3em\" viewBox=\"0 0 16 16\" className=\"bi bi-arrow-left-square-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" onClick={event =>  window.location.href='/'}>\r\n                    <path fillRule=\"evenodd\" d=\"M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm9.5 8.5a.5.5 0 0 0 0-1H5.707l2.147-2.146a.5.5 0 1 0-.708-.708l-3 3a.5.5 0 0 0 0 .708l3 3a.5.5 0 0 0 .708-.708L5.707 8.5H11.5z\"/>\r\n                  </svg>\r\n                </div>\r\n              </Form.Group>\r\n            <Form.Group\r\n              controlId=\"formGridState\"\r\n              className=\"form-group logsGroup\"\r\n            >\r\n              <Form.Label className=\"col formLabel\">\r\n                State\r\n              </Form.Label>\r\n              <div className=\"col colLog\">\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  className=\"form-control-static selectOptState\"\r\n                  onChange={this.change}\r\n                  value={this.state.value}\r\n                >\r\n                  <option value=\"All\">All</option>\r\n                  <option value=\"end\">End</option>\r\n                  <option value=\"begin\">Begin</option>\r\n                  <option value=\"processing\">Processing</option>\r\n                </Form.Control>\r\n              </div>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formGridLogsName\" className=\"form-group flex-grow-1 mr-auto form-group form-group\">\r\n              <Form.Label className=\"col-md-auto control-label formLabel form-label\">\r\n                Process name\r\n              </Form.Label>\r\n              <div className=\"col colLog\">\r\n                <Form.Control\r\n                  placeholder=\"Process name\"\r\n                  className=\"form-control-static selectOpt form-control processFilter\"\r\n                  onChange={this.change}\r\n                  style = {{width:\"95%\"}}\r\n                />\r\n              </div>\r\n              <div className=\"refreshBtnDiv\" onClick = {() => this.props.pipelineToken(this.props.refreshToken)}>\r\n                <IconButton aria-label=\"refresh\" className= \"refreshBtn\" size=\"small\">\r\n                  <i className=\"fa fa-refresh float-right\" aria-hidden=\"true\"></i>\r\n                </IconButton>\r\n              </div>\r\n            </Form.Group>\r\n          </Form.Row>\r\n        </Form>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default FilterForm;\r\n","import React, { Component } from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport filterFactory from \"react-bootstrap-table2-filter\";\r\nimport {OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport {BootstrapTable as BTable, TableHeaderColumn} from \"react-bootstrap-table\";\r\n/**\r\n * @componentName Monitoring page\r\n * @description This is a component responsible for all tables that aprears in app\r\n */\r\nconst stateType = {\r\n  'All': '',\r\n  'end': 'end',\r\n  'begin': 'begin',\r\n  \"processing\": \"processing\"\r\n};\r\n\r\nclass MonitoringPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.tooltipCopyFormatter = this.tooltipCopyFormatter.bind(this);\r\n    this.formatCopyData = this.formatCopyData.bind(this);\r\n    this.state = {\r\n      pipelineToken: \"\",\r\n      popoverOpen: false,\r\n      columnWidths: [178.05,160,190,190,190,100,100,200,50]\r\n    };\r\n  }\r\n  \r\n  enumFormatter(cell, row, enumObject) {\r\n    return enumObject[cell];\r\n  };\r\n\r\n  toggle() {\r\n    this.setState({\r\n      popoverOpen: !this.state.popoverOpen,\r\n    });\r\n  };\r\n\r\n  columnHover = (cell, row, enumObject, rowIndex) => {\r\n    return cell;\r\n  };\r\n\r\n  showCopyIcn(e) {\r\n    this.setState({showCopyIcon : true});\r\n  };\r\n\r\n  tooltipFormatter(cell, row) {\r\n    return (\r\n      <OverlayTrigger\r\n        placement=\"left\"\r\n        overlay={<Tooltip id={String(row.id)}>{cell}</Tooltip>}\r\n      >\r\n        <span>{cell}</span>\r\n      </OverlayTrigger>\r\n    );\r\n  };\r\n\r\n  formatCopyData = (data) => {\r\n    delete data.id;\r\n    delete data.copy;\r\n\r\n    let formatedData = JSON.stringify(data, null, 2).replace(/[\"{[,}\\]]/g, \"\");\r\n    let x = formatedData.replace(/\\\\n/g,\"\");\r\n    return x.replace(/\\\\t/g,\"\");\r\n  };\r\n\r\n  copyToClipboard(text) {\r\n    if (typeof(navigator.clipboard)=='undefined') {\r\n      let textArea = document.createElement(\"textarea\");\r\n      textArea.value = text;\r\n      textArea.style.position=\"fixed\"; \r\n      document.body.appendChild(textArea);\r\n      textArea.focus();\r\n      textArea.select();\r\n\r\n      try {\r\n        var successful = document.execCommand('copy');\r\n      } catch (err) {\r\n          console.log('Was not possible to copy te text: ', err);\r\n      }\r\n      document.body.removeChild(textArea);            \r\n      return;\r\n    }\r\n    navigator.clipboard.writeText(text).then(function() {   \r\n    }, function(err) {\r\n      console.log('unsuccessful!', err);\r\n    });\r\n  };\r\n\r\n  tooltipCopyFormatter(cell, row) {\r\n    let formatedData = this.formatCopyData(row);\r\n    return (\r\n      <OverlayTrigger\r\n        placement=\"left\"\r\n        overlay={<Tooltip id={String(row.id)}>Copy</Tooltip>}\r\n      >\r\n        <span><i className=\"fa fa-copy\" onClick={() => {this.copyToClipboard(formatedData); alert(formatedData)}}></i></span>\r\n      </OverlayTrigger>\r\n    );\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.filterKeyword) {\r\n      this.refs.stateNameCol.applyFilter(nextProps.filterKeyword);  \r\n    }\r\n    if(nextProps.filterProcessKeyword === \"\")\r\n      this.refs.processNameCol.applyFilter(nextProps.filterProcessKeyword);\r\n    if (nextProps.filterProcessKeyword) { \r\n      this.refs.processNameCol.applyFilter(nextProps.filterProcessKeyword); \r\n    }\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    for (let index = 0; index < 12; index += 1) {\r\n      if (window.$(`.react-bs-container-header .table th:eq(${index})`).length === 0) break;\r\n      window.$(`.react-bs-container-header .table th:eq(${index})`).resizable({\r\n        minWidth: 50,\r\n        handles: 'e',\r\n        resize: (__event, ui) => {\r\n          const newColumnWidths = [...this.state.columnWidths];\r\n          newColumnWidths[index] = ui.size.width;\r\n          this.setState({ columnWidths: newColumnWidths });\r\n        },\r\n      });  \r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { columns, dataSource } = this.props;\r\n    const selectRow = this.props.isSelect;\r\n    const keyField = this.props.keyField;\r\n    this.props.dataSource.forEach(function (element) {\r\n      element.copy = \"true\";\r\n    });\r\n    const tableRowEvents = {\r\n      onClick: (e, row, rowIndex) => {\r\n        if('pipelineToken' in row) {\r\n          this.props.setRefreshToken(row.pipelineToken);\r\n          this.props.pipelineToken(row.pipelineToken);\r\n        }\r\n      }\r\n    };\r\n\r\n    const select = {\r\n      mode: \"checkbox\",\r\n      clickToSelect: true,\r\n      hideSelectAll: true,\r\n      style: { width: '2%' },\r\n      onSelect: (row, isSelect, rowIndex, e) => {\r\n        if('pipelineToken' in row) {\r\n\t\t  this.props.setRefreshToken(row.pipelineToken);\r\n          this.props.pipelineToken(row.pipelineToken);\r\n          this.props.onTurn(\"logs\");\r\n        }\r\n      },\r\n    };\r\n\r\n    if (selectRow) {\r\n        return (\r\n          <div className=\"container table-responsive\">\r\n            <BootstrapTable\r\n              bootstrap4\r\n              keyField={keyField}\r\n              bordered={false}\r\n              striped={true}\r\n              hover={true}\r\n              selectRow={select}\r\n              data={dataSource}\r\n              sort = {{dataField: \"endTime\", order: \"desc\"}}\r\n              columns={columns}\r\n              filter={filterFactory()}\r\n              rowEvents={tableRowEvents }\r\n              headerClasses =\"custom-row-class\"\r\n            />\r\n          </div>\r\n        );\r\n    } else {\r\n      return (\r\n        <div className=\"table-responsive\">\r\n        <BTable\r\n          data={this.props.dataSource}\r\n          bordered={false}\r\n          striped={true}\r\n          hover={true}\r\n          dataFormat={this.props.dataFormat}\r\n          filter={filterFactory()}\r\n          containerStyle={{ width: \"1424.371\"}}\r\n          tableStyle={{}}\r\n          bodyStyle={{}} \r\n          headerStyle={{}}\r\n        >\r\n          <TableHeaderColumn dataField=\"sqsDateTime\" dataFormat={this.tooltipFormatter} dataSort={true} thStyle={{width:`${this.state.columnWidths[0]}px`, border:\"1px solid white\"}} tdStyle={{width:`${this.state.columnWidths[0]}px`}}>\r\n            TIME\r\n          </TableHeaderColumn>  \r\n          <TableHeaderColumn isKey={true} dataField=\"processName\" dataFormat={this.tooltipFormatter} dataSort={true} thStyle={{width:`${this.state.columnWidths[1]}px`, border:\"1px solid white\"}} tdStyle={{width:`${this.state.columnWidths[1]}px`}}  ref='processNameCol' filter={{ type: 'TextFilter', defaultValue: '' }}>\r\n            PROCESS\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"publisherToken\" dataSort={true}  dataFormat={this.tooltipFormatter}  thStyle={{width:`${this.state.columnWidths[2]}px`, border:\"1px solid white\"}} tdStyle={{width:`${this.state.columnWidths[2]}px`}} >\r\n            PUBLISHER TOKEN\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"pipelineToken\" dataSort={true} dataFormat={this.tooltipFormatter} thStyle={{width:`${this.state.columnWidths[3]}px`, border:\"1px solid white\"}} tdStyle={{width:`${this.state.columnWidths[3]}px`}}>\r\n            PIPELINE TOKEN\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"filename\" dataSort={true} dataFormat={this.tooltipFormatter} thStyle={{width:`${this.state.columnWidths[4]}px`, border:\"1px solid white\"}} tdStyle={{width:`${this.state.columnWidths[4]}px`}}>\r\n            FILENAME\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"state\" thStyle={{width:`${this.state.columnWidths[5]}px`,  border:\"1px solid white\"}} tdStyle={{width: `${this.state.columnWidths[5]}px`}} dataSort={true} ref='stateNameCol' filterFormatted dataFormat={ this.enumFormatter }\r\n                formatExtraData={ stateType } filter={ { type: 'SelectFilter', options: stateType } }>\r\n            STATE\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"code\" dataFormat={this.tooltipFormatter} dataSort={true} thStyle={{width:`${this.state.columnWidths[6]}px`, border:\"1px solid white\"}} tdStyle={{width:`${this.state.columnWidths[6]}px`}}>\r\n            CODE\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"description\" dataSort={true} dataFormat={this.tooltipFormatter} thStyle={{width:`${this.state.columnWidths[7]}px`, border:\"1px solid white\"}} tdStyle={{width: `${this.state.columnWidths[7]}px`}} >\r\n            DESCRIPTION\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"copy\"  dataFormat={this.tooltipCopyFormatter} thStyle={{width:`${this.state.columnWidths[8]}px`, border:\"1px solid white\"}} tdStyle={{width: `${this.state.columnWidths[8]}px`}}>\r\n          </TableHeaderColumn>\r\n        </BTable>\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default MonitoringPage;\r\n","export const COLUMNS_LOGS = [\r\n  {\r\n    dataField: \"sqsDatatimeCreated\",\r\n    text: \"TIME\",\r\n  },\r\n  {\r\n    dataField: \"processName\",\r\n    text: \"PROCESS\",\r\n  },\r\n  {\r\n    dataField: \"publisherToken\",\r\n    text: \"PUBLISHER TOKEN\",\r\n  },\r\n  {\r\n    dataField: \"pipelineToken\",\r\n    text: \"PIPELINE TOKEN\",\r\n  },\r\n  {\r\n    dataField: \"filename\",\r\n    text: \"FILENAME\",\r\n  },\r\n  {\r\n    dataField: \"state\",\r\n    text: \"STATE\",\r\n  },\r\n  {\r\n    dataField: \"code\",\r\n    text: \"CODE\",\r\n  },\r\n  {\r\n    dataField: \"description\",\r\n    text: \"DESCRIPTION\",\r\n    classes: \"descr\",\r\n    ids: \"descr\",\r\n  },\r\n];\r\n\r\nexport const COLUMNS_SOURCE_SCHEMA = [\r\n  {\r\n    dataField: \"name\",\r\n    text: \"NAME\"\r\n  },\r\n  {\r\n    dataField: \"type\",\r\n    text: \"TYPE\",\r\n  },\r\n];\r\n\r\nexport const STEPS = [\r\n  { title: \"Step 1\" },\r\n  { title: \"Step 2\" },\r\n  { title: \"Step 3\" },\r\n  { title: \"Step 4\" },\r\n];\r\n\r\n/*export const GLUE_SCHEMA_TYPES = [\r\n  { value: \"string\", label: \"string\" },\r\n  { value: \"double\", label: \"double\" },\r\n  { value: \"float\", label: \"float\" },\r\n  { value: \"int\", label: \"int\" },\r\n  { value: \"bigint\", label: \"bigint\" },\r\n  { value: \"boolean\", label: \"boolean\" },\r\n  { value: \"date\", label: \"date\" },\r\n  { value: \"tinyint\", label: \"tinyint\" },\r\n  { value: \"timestamp\", label: \"timestamp\" },\r\n  { value: \"smallint\", label: \"smallint\" },\r\n  { value: \"char\", label: \"char\" },\r\n  { value: \"varchar\", label: \"varchar\" }\r\n]; */\r\n\r\nexport const GLUE_SCHEMA_TYPES = [\r\n  { value: \"string\", label: \"string\" },\r\n  { value: \"boolean\", label: \"boolean\" },\r\n  { value: \"bigint\", label: \"bigint\" },\r\n  { value: \"char\", label: \"char\" },\r\n  { value: \"double\", label: \"double\" },\r\n  { value: \"decimal\", label: \"decimal\" },\r\n  { value: \"date\", label: \"date\" },\r\n  { value: \"float\", label: \"float\" },\r\n  { value: \"int\", label: \"int\" },\r\n  { value: \"smallint\", label: \"smallint\" },\r\n  { value: \"struct\", label: \"struct\" },\r\n  { value: \"tinyint\", label: \"tinyint\" },\r\n  { value: \"timestamp\", label: \"timestamp\" },\r\n  { value: \"varchar\", label: \"varchar\" }\r\n  \r\n];\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport FilterForm from \"./FilterForm\";\r\nimport MonitoringPage from \"./MonitoringPage\";\r\nimport { customFilter } from \"react-bootstrap-table2-filter\";\r\nimport { COLUMNS_LOGS } from \"../constants\";\r\nimport { trackPromise } from 'react-promise-tracker';\r\n/**\r\n * @componentName Dashboard component\r\n * @description Main component in app which renders all other components\r\n */\r\n\r\nconst ACCESS_KEY_ID = process.env.REACT_APP_ACCESS_KEY_ID;\r\nconst SECRET_ACCESS_KEY = process.env.REACT_APP_SECRET_ACCESS_KEY;\r\nconst REGION = process.env.REACT_APP_REGION;\r\nconst ENDPOINT = process.env.REACT_APP_AWS_ENDPOINT;\r\nconst X_API_KEY = process.env.REACT_APP_X_API_KEY;\r\n\r\n\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.showError = React.createRef();\r\n    this.state = {\r\n      mounted: false,\r\n      applyFilter: false,\r\n      filterKeyword: \"\",\r\n      filterProcessKeyword: \"\",\r\n      columnSelected: false,\r\n      key: \"data\",\r\n      i: 0,\r\n      filterValue: \"\",\r\n      refreshToken: \"\",\r\n      datasets: [],\r\n      dataSourceLogs: [],\r\n    };\r\n  }\r\n\r\n  onResultFilter = null;\r\n  onStatusFilter = null;\r\n  onDsNameFilter = null;\r\n  onStateFilter = null;\r\n  onProcessFilter = null;\r\n\r\n  columnsData = [\r\n    {\r\n      dataField: \"pipelineToken\",\r\n      hidden: true,\r\n    },\r\n    {\r\n      dataField: \"dataset\",\r\n      text: \"DATASET\",\r\n      filter: customFilter(),\r\n      sort: true,\r\n      filterRenderer: (onFilter, column) => {\r\n        this.onDsNameFilter = onFilter;\r\n        return null;\r\n      },\r\n      onSelect: (row, isSelect, rowIndex, e) => {\r\n        this.setState({ columnSelected: true });\r\n        this.setState({ key: \"logs\" });\r\n      },\r\n    },\r\n    {\r\n      dataField: \"process\",\r\n      text: \"CURRENT PROCESS\",\r\n    },\r\n    {\r\n      dataField: \"startTime\",\r\n      text: \"START TIME\",\r\n    },\r\n    {\r\n      dataField: \"endTime\",\r\n      text: \"END TIME\",\r\n    },\r\n    {\r\n      dataField: \"totalTime\",\r\n      text: \"TOTAL TIME\",\r\n    },\r\n    {\r\n      dataField: \"status\",\r\n      text: \"STATUS\",\r\n      filter: customFilter(),\r\n      filterRenderer: (onFilter, column) => {\r\n        this.onResultFilter = onFilter;\r\n        return null;\r\n      },\r\n    },\r\n  ];\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (JSON.stringify(this.props.dataSource) !== JSON.stringify(prevProps.dataSource)) {\r\n      this.setState({ datasets: this.props.dataSource });\r\n    }\r\n  };\r\n\r\n  setupAWSSdk() {\r\n    let AWS = require('aws-sdk');\r\n    AWS.config = new AWS.Config();\r\n    AWS.config.accessKeyId = ACCESS_KEY_ID;\r\n    AWS.config.secretAccessKey = SECRET_ACCESS_KEY;\r\n    AWS.config.region = REGION;\r\n    return AWS;\r\n  };\r\n\r\n  onValueChange = (event) => {\r\n    let valueAll = \"\";\r\n    let targetId = event.target.id;\r\n    const { value } = event.target;\r\n\r\n    if (targetId === \"formGridResult\") {\r\n      if (value !== \"All\") {\r\n        valueAll = value;\r\n      }\r\n      this.onResultFilter(valueAll);\r\n    }\r\n    if (targetId === \"formGridStatus\") {\r\n      if (value !== \"All\") {\r\n        valueAll = value;\r\n      }\r\n      this.onStatusFilter(valueAll);\r\n    }\r\n    if (targetId === \"formGridDatasetName\") {\r\n      if (value !== \"All\") {\r\n        valueAll = value;\r\n      }\r\n      this.onDsNameFilter(valueAll);\r\n    }\r\n  };\r\n\r\n\r\n  setActive(activeId) {\r\n    this.setState({ active: activeId });\r\n  };\r\n\r\n  onTurn(id) {\r\n    this.setState({ key: id });\r\n  };\r\n \r\n  alreadyMounted(mounted) {\r\n    this.setState({ mounted: mounted })\r\n  };\r\n\r\n  setRefreshToken(token) {\r\n    this.setState({ refreshToken: token })\r\n  };\r\n\r\n  callFilterStatus(newKeyword) {\r\n    this.setState({ applyFilter: true, filterKeyword: newKeyword });\r\n  };\r\n\r\n  callFilterProcess(newKeyword) {\r\n    this.setState({ applyFilter: true, filterProcessKeyword: newKeyword });\r\n  };\r\n\r\n  fetchLogsData(pipelineToken) {\r\n    trackPromise(\r\n      axios\r\n        .get(\r\n          \"https://\" + ENDPOINT +\r\n          pipelineToken,\r\n          {\r\n            headers: {\r\n              \"X-API-Key\": X_API_KEY,\r\n            }\r\n          }\r\n        )\r\n        .then((res) => {\r\n          this.setState({ dataSourceLogs: res.data });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        })\r\n    );\r\n  };\r\n\r\n\r\n  render() {\r\n    const dataSource = this.state.datasets;\r\n    let datasetNames = [];\r\n    dataSource.forEach((data) => {\r\n      datasetNames.push(data.name);\r\n    });\r\n\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 tabWrapper\">\r\n            {this.state.key === \"data\" && (\r\n              <div className=\"container-fluid tabCont\">\r\n                <FilterForm\r\n                  tabSelect=\"Data\"\r\n                  author={false}\r\n                  onChange={this.onValueChange}\r\n                  loadMoreData={this.props.loadMoreData}\r\n                />\r\n                <MonitoringPage\r\n                  keyField=\"pipelineToken\"\r\n                  columns={this.columnsData}\r\n                  dataSource={dataSource}\r\n                  isSelect={true}\r\n                  onTurn={this.onTurn.bind(this)}\r\n                  pipelineToken={this.fetchLogsData.bind(this)}\r\n                  setRefreshToken={this.setRefreshToken.bind(this)}\r\n                />\r\n              </div>\r\n            )}\r\n            {this.state.key === \"logs\" && (\r\n              <div className=\"container-fluid tabCont\">\r\n                <FilterForm\r\n                  tabSelect=\"Logs\"\r\n                  callFilterStatus={this.callFilterStatus.bind(this)}\r\n                  callFilterProcess={this.callFilterProcess.bind(this)}\r\n                  loadMoreData={this.props.loadMoreData}\r\n                  refreshToken={this.state.refreshToken}\r\n                  pipelineToken={this.fetchLogsData.bind(this)}\r\n\r\n                />\r\n                <MonitoringPage\r\n                  keyField=\"pipelineToken\"\r\n                  columns={COLUMNS_LOGS}\r\n                  resizable={true}\r\n                  dataSource={this.state.dataSourceLogs}\r\n                  applyFilter={this.state.applyFilter}\r\n                  filterKeyword={this.state.filterKeyword}\r\n                  filterProcessKeyword={this.state.filterProcessKeyword}\r\n                  setRefreshToken={this.setRefreshToken.bind(this)}\r\n                  setActive={this.setActive}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  }\r\nexport default Dashboard;\r\n","import React, {Component} from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\"; \r\nimport Logo from \"../asserts/logo.png\";\r\n/**\r\n * @componentName Nav\r\n * @description This is a component responsible for Top Navbar\r\n */\r\n\r\nclass Nav extends Component {\r\n \r\n  render() {   \r\n      return(\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n        <Navbar.Brand>\r\n          <img\r\n            alt=\"logo\"   \r\n            src={Logo}\r\n            height=\"70\"\r\n            className=\"d-inline-block align-top\"\r\n          />{' '}\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;","import React, { Component } from \"react\";\r\nimport Dashboard from \"./components/Dashboard\";\r\nimport Nav from \"./components/Nav\";\r\nimport axios from \"axios\";\r\nimport { trackPromise } from 'react-promise-tracker';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n/**\r\n * @componentName App component\r\n * @description Main component in app which acts as a container for all other components\r\n */\r\nconst ACCESS_KEY_ID = process.env.REACT_APP_ACCESS_KEY_ID;\r\nconst SECRET_ACCESS_KEY = process.env.REACT_APP_SECRET_ACCESS_KEY;\r\nconst REGION = process.env.REACT_APP_REGION;\r\nconst ENDPOINT = process.env.REACT_APP_AWS_ENDPOINT;\r\nconst X_API_KEY = process.env.REACT_APP_X_API_KEY;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dataset: [],\r\n      newDataSource: [],\r\n      isEmptyState: true,\r\n      isAddTripState: false,\r\n      showErrorAlert: false\r\n    };\r\n  }\r\n\r\n  fetchData() {\r\n    trackPromise(\r\n      axios\r\n        .get(\"https://\" + ENDPOINT, { headers: { \"X-API-Key\": X_API_KEY}})\r\n        .then((res) => {\r\n          const dataset = res.data;\r\n          this.setState({dataset});\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n      }));\r\n  }\r\n\r\n  setupAWSSdk() {\r\n    let AWS = require('aws-sdk'); \r\n    AWS.config = new AWS.Config();\r\n    AWS.config.accessKeyId = ACCESS_KEY_ID;\r\n    AWS.config.secretAccessKey = SECRET_ACCESS_KEY;\r\n    AWS.config.region = REGION;\r\n    return AWS;\r\n  }\r\n\r\n  async getDynamoDbData() {\r\n    let AWS = this.setupAWSSdk();\r\n    AWS.config.update({dynamoDbCrc32: false});\r\n    let docClient = new AWS.DynamoDB.DocumentClient();\r\n\r\n    try {\r\n      let params = {\r\n          TableName: 'edl-dataset',\r\n      };\r\n      let result = await docClient.scan(params).promise()\r\n      this.setState({newDataSource: result[\"Items\"]})\r\n    } catch (error) {\r\n      console.error(error);\r\n      } \r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getDynamoDbData();\r\n    this.fetchData();\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      isEmptyState: true,\r\n      isAddTripState: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <Router>\r\n          <Nav onClick={() => this.handleClick.bind(this)} />\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Dashboard\r\n                isDataset={false}\r\n                isAddTripState={false}\r\n                dataSource={this.state.dataset}\r\n                loadMoreData={() => this.fetchData.bind(this)}\r\n                />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Loader from 'react-loader-spinner';\r\nimport { usePromiseTracker } from \"react-promise-tracker\";\r\n\r\nconst LoadingIndicator = props => {\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    console.disableYellowBox = true;\r\n  \r\n    return promiseInProgress && \r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\"\r\n        }}\r\n      >\r\n        <Loader type=\"ThreeDots\" color=\"#343a40\" height=\"50\" width=\"50\" />\r\n      </div>\r\n  };\r\n\r\nReactDOM.render( <div><App /><LoadingIndicator/></div>, document.getElementById('root'));\r\n\r\n\r\n//ReactDOM.render(\r\n//  <React.StrictMode>\r\n//    <App />  \r\n//  </React.StrictMode>,\r\n//  document.getElementById('root')\r\n//);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}